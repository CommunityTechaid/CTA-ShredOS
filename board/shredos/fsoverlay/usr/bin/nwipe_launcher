#!/bin/bash


# trap the ctrl+c signal
#
trap "echo" INT

# Check dmesg for USB activity, do not proceed until there has been no
# activity for 5 seconds or automatically proceed after 30 seconds.
#
# previous_sha1=""
# loop_count=0

# printf "\nWaiting for all USB devices to be initialised, timeout 30s ."

# while true; do
#     sha1=$(dmesg | grep -i USB | sha1sum)
#     if [[ "$previous_sha1" == "$sha1" ]]; then
#         break
#     fi
#     previous_sha1=$sha1
#     sleep 1
#     printf "."
#     sleep 1
#     printf "."
#     sleep 1
#     printf "."
#     sleep 1
#     printf "."
#     sleep 1
#     printf "."
#     ((loop_count++))
#     if [ $loop_count == 6 ]; then
#         break
#     fi
# done
# printf "\n"

## initialise vars
#
country_code=""
pinged=0
server_ip="10.0.0.1"
scripts_command_line=""
nwipe_options_string=""
lftp_command_line=""
autopoweroff=0
scripts_present_flag=0
serial_number="$(lshw -class system -json | jq -r '.[0].serial')"

# start networking
# /etc/init.d/S40network start

# log () {
#     message="$1"
#     time=$(date)
#     log_string="[$time] $message"
#     echo "$log_string"
# }
# log "test log message"

break_error () {
    read -n 1 -p "Something has gone wrong. Show the above to TomC. Press any key to continue."
}

echo "[$(date)] lftp log" > lftp.log
echo "[$(date)] wget log" > wget.log
echo "[$(date)] scripts log" > scripts.log

# read the kernel command line for the loadkeys label for setting the correct keyboard layout
#
country_code=$(kernel_cmdline_extractor loadkeys)
if [ -n "${country_code}" ]; then
    loadkeys "$country_code"
fi

# archive dmesg.txt and nwipe logs prior to launching nwipe. This is done just
# in case there are any display issues and we want to take a look at the dmesg data.
#
# archive_log.sh -r also reads the /etc/nwipe/nwipe.conf and /etc/nwipe/customers.csv
# files from the USB flash drive to ShredOS's ram disc
/usr/bin/archive_log.sh -r

## Prep for scripts
#creating output directory in /usr
echo "[$(date)] Creating output directory for device_logs"
if [ -d "/usr/output" ]; then
    echo "[$(date)] Found existing output directory. Deleting to rewrite"
    rm -rf /usr/output
fi

mkdir /usr/output
echo "[$(date)] Created /usr/output directory"

## check if device has ip on eth0,
echo "[$(date)] Waiting for the network"
has_ip=1
while [ $has_ip -eq 1 ]; do
    # pause to give services a chance to catch up
    sleep 15
    # ask ip for all IPv4 address and see if eth0 is present
    ip -4 addr | grep eth0 > /dev/null
    # grep exit status is 1 when string isn't found
    has_ip=$?
    if [ $has_ip -eq 1 ]; then
        echo "[$(date)] Failed to get an IP address. Restarting network."
        /etc/init.d/S40network restart > /dev/null
        # pause to give the network scripts a chance to finish
        sleep 15
    fi
done
echo "[$(date)] Now have an IP address."

## wait for network ()
echo "[$(date)] Waiting for server"
while [ $pinged -eq 0 ]; do
    ping -c 1 "$server_ip" > /dev/null 2>&1
    ping_exit_status=$?
    if [ $ping_exit_status -eq 0 ]; then
        pinged=1
    fi
done
echo "[$(date)] Successfully pinged $server_ip"

## pre-launch hook
# get files using lftp server and execute them prior to launching nwipe
scripts_command_line="$(kernel_cmdline_extractor get_scripts)"
echo "[$(date)] $scripts_command_line"
if [ -n "${scripts_command_line}" ]; then
    scripts_present_flag=1

    echo "[$(date)] Found script option specified in kernel command line in grub.cfg"
    if [ -d "/usr/bin/scripts" ]; then
        echo "[$(date)] Found existing script directory. Deleting to rewrite"
        rm -rf /usr/bin/scripts
    fi

    mkdir /usr/bin/scripts

    echo "[$(date)] Created scripts directory"
    echo "[$(date)] Executing command specfied to copy script directory"

    lftp -c "$scripts_command_line" >> lftp.log

    script_get_exit_code="$?"
    if [ $script_get_exit_code == 0 ]; then
        echo "[$(date)] Executed command successfully. Now executing pre-launch files in the directory"
        chmod +x /usr/bin/scripts/*
        /usr/bin/pre.sh | tee -a scripts.log
    else
        break_error

    fi
fi

# Setting date / time strings here, so pre_003 has a chance to reach NTP server and correct the date.
date_string="$(date +%Y-%m-%d)"
time_string="$(date +%H%M%S)"


# define logfile format after CTA ID is inputted by user in pre_ script
cta_device_id=$(<CTA_ID)
logfile='nwipe_log_'"$date_string"'--'"$cta_device_id"'--'"$serial_number"'_'"$time_string"'.txt'

## core nwipe launcher
# read the kernel command line for nwipe options
#
nwipe_options_string=$(kernel_cmdline_extractor nwipe_options)
echo "[$(date)] $nwipe_options_string"
if [ -n "${nwipe_options_string}" ]; then
    # set some flags
    nwipe_options_flag=1

    # Remove the --autopoweroff string if present from the nwipe options.
    # We do this because we don't want nwipe itself to power down the system.
    # ShredOS will handle the auto power down once the logs and dmesg output
    # have been transferred to the USB flash drive after the wipe completes.
    # One feature of nwipes autopoweroff is that it does not require the user
    # to press a key to exit. So that nwipe doesn't pause waiting for the
    # user to press a key which is nwipes default behaviour, we replace
    # --autopoweroff with --nowait.

    case "$nwipe_options_string" in
        *--autopoweroff*) autopoweroff=1 ;;
        *               ) autopoweroff=0 ;;
    esac

    if [ $autopoweroff == 1 ]; then
        echo "$nwipe_options_string" > nwipe_options.txt
        sed -i 's/--autopoweroff/--nowait/g' nwipe_options.txt
        nwipe_options_string=$(<nwipe_options.txt)
    fi

    # In addition, check whether user has specified a /dev/loop0 or /dev/loop1
    # device and if yes, create 1Mbyte loop devices. These are used for testing.

    case "$nwipe_options_string" in
        */dev/loop0*) createloop0=1 ;;
        *           ) createloop0=0 ;;
    esac

    if [ $createloop0 == 1 ]; then
        truncate -s 1M loopback0.img
        losetup -fP loopback0.img
    fi

    case "$nwipe_options_string" in
        */dev/loop0*) createloop1=1 ;;
        *           ) createloop1=0 ;;
    esac

    if [ $createloop1 == 1 ]; then
        truncate -s 1M loopback1.img
        losetup -fP loopback1.img
    fi

else
    nwipe_options_flag=0
fi

# run nwipe with a time stamped log file
#
if [ $nwipe_options_flag -eq 0 ]; then
    /usr/bin/nwipe --logfile="$logfile"
else
    /usr/bin/nwipe --logfile="$logfile" $nwipe_options_string
fi

# nwipe_exit_status=$?
# if [ ! $nwipe_exit_status -eq 0 ]; then
#     echo "!!!!!!!!!!!!!!!!!!!!!!!"
#     echo "Logfile: $logfile"
#     echo "$(<"$logfile")"
#     echo "!!!!!!!!!!!!!!!!!!!!!!!"
#     echo "nwipe_options_string: $nwipe_options_string"
#     echo "!!!!!!!!!!!!!!!!!!!!!!!"
#     read -n 1 -p "Something has gone wrong. Show the above to TomC"
# fi

# read the kernel command line for a lftp command
# example lftp command "open 192.168.1.60; user joe joe's_password; cd data; mput nwipe_*.txt
#
lftp_command_line=$(kernel_cmdline_extractor lftp)
if [ -n "${lftp_command_line}" ]; then
    echo "[$(date)] Found lftp commands on kernel command line in grub.cfg"
    if [ ! -d "exported" ]; then
        mkdir exported
        echo "[$(date)] created exported directory"
    fi
    echo "[$(date)] Executing users lftp commands"
    lftp -c "$lftp_command_line" >> lftp.log
    if [ $? == 0 ]; then
        echo "[$(date)] lftp completed sucessfully"
        echo "[$(date)] moving nwipe logs to ../exported"
        mv $logfile exported/
    else
        echo "[$(date)] lftp command failed, See above and lftp.log for details"
    fi
fi


# Now nwipe has exited, archive dmesg.txt, nwipe logs and PDF certificates to USB
# flash drive. This is done just in case there are any display issues and we want
# to take a look at the dmesg data.
#
# archive_log.sh -w also writes the /etc/nwipe/nwipe.conf and /etc/nwipe/customers.csv
# files to the USB flash drive from ShredOS's ram disc.
/usr/bin/archive_log.sh -w

# Post nwipe hook
# Executing the commands in the script directory that are to run post nwipe execution
if [ $scripts_present_flag == 1 ]; then
    echo "[$(date)] Now executing post nwipe scripts in the directory scripts directory"
    /usr/bin/post.sh | tee -a scripts.log
fi

#Finishing up - This part is copied from the previous version of nwipe launcher
#The post script should ideally not return as it will display whatever necessary instruction or output. In case it returns,
#we indicate the end of the process and display a msgbox as below.

# Define dlg stolen from pre_001 script as nag_power referenced it without it being defined

dlg_backtitle="Community TechAid drive eraser (feat. ShredOS and nwipe)"
dlg () {
    dialog --no-cancel --colors --backtitle "${dlg_backtitle}" "$@"
}

nag_poweroff () {
    dlg --cr-wrap --no-collapse --title 'End of wipe process' \
        --infobox "
\Zn  You can now safely switch off the machine.
  When it's turned off, put it on the correct shelf
" 26 80
}

nag_poweroff

# TC: Below should be superfluous (See lines 122 -> 132)
# If the user specified --autopoweroff as a nwipe option then shutdown now 
#
if [ $autopoweroff == 1 ]; then
    init 0
fi

exit
